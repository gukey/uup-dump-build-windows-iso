name: build

on:
  workflow_dispatch:
  #schedule:
    #- cron: '0 */2 * * *' # hourly.
    #- cron: '0 0 17 * * *' # every month, the 17th day.

jobs:
  build:
    strategy:
      matrix:
        include:
          - name: windows-10
          #- name: windows-11
    runs-on: windows-2022
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      # Log the available disk space, so we can inspect it later.
      # NB GitHub-hosted runners have limited available disk space.
      #    see https://docs.github.com/en/actions/using-github-hosted-runners/about-github-hosted-runners#supported-runners-and-hardware-resources
      - name: Show available disk space before build
        run: Get-PSDrive -PSProvider FileSystem

      # NB we are writing outside of the current working/job directory
      #    because it does not have sufficient available disk space.
      - name: Build
        run: pwsh uup-dump-get-windows-iso.ps1 ${{ matrix.name }} c:/output

      - name: Show available disk space after build
        run: Get-PSDrive -PSProvider FileSystem

      - name: Build summary
        id: build_summary
        run: |
          $iso = Get-Content (Resolve-Path c:/output/*.json) | ConvertFrom-Json
          Add-Content $env:GITHUB_STEP_SUMMARY @"
          | Property | Value |
          | :--- | :--- |
          | Name | $($iso.name) |
          | Build | $($iso.build) |
          | Checksum | $($iso.checksum) |
          $($iso.images | ForEach-Object {"| Image Name #$($_.index) | $($_.name) |"})
          | UUP dump | [$($iso.title)]($($iso.uupDump.downloadUrl)) |
          "@
          echo "build=$($iso.build)" >> $env:GITHUB_ENV
          echo "name=$($iso.name)" >> $env:GITHUB_ENV
          echo "title=$($iso.title)" >> $env:GITHUB_ENV
          echo "iso_name=$($iso.name)" >> $env:GITHUB_ENV

      - name: Find iso file
        id: find_iso
        run: |
          $isoName = "${{ env.iso_name }}"
          $files = Get-ChildItem -Path "c:/output/$isoName.iso"
          $filePaths = $files | ForEach-Object { $_.FullName }
          # Build artifact links and append to summary
          $fileLinks = $filePaths | ForEach-Object { "| Artifact | [$(($_.Split('/'))[-1])]($_)" }
          Add-Content $env:GITHUB_STEP_SUMMARY "`n| Artifacts |`n$fileLinks`n"
          echo "files=$(echo $filePaths -join ',')" >> $env:GITHUB_ENV

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: "v${{ env.build }}.${{ github.run_number }}"
          release_name: ${{ env.name }}
          body: ${{ steps.build_summary.outputs.summary }}
          draft: false
          prerelease: false
      - name: Remove old artifacts
        uses: c-hive/gha-remove-artifacts@v1
        with:
          age: '30 days' # '<number> <unit>', e.g. 5 days, 2 years, 90 seconds, parsed by Moment.js
              # Optional inputs
              # skip-tags: true
              # skip-recent: 5
